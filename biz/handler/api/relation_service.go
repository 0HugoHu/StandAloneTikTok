// Code generated by hertz generator.

package api

import (
	"context"
	"douyin/pkg/global"

	"douyin/biz/model/api"
	"douyin/biz/service"
	"douyin/pkg/constant"
	"douyin/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Follow .
// @router /douyin/relation/action/ [POST]
func Follow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Info("handler.relation_service.Follow Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.relation_service.Follow GetUserID:", userID)
	var resp *api.DouyinRelationActionResponse
	if req.ActionType == constant.Follow {
		resp, err = service.Follow(userID, uint64(req.ToUserID))
	} else if req.ActionType == constant.CancelFollow {
		resp, err = service.CancelFollow(userID, uint64(req.ToUserID))
	} else {
		err = errno.UserRequestParameterError
		hlog.Error("handler.relation_service.Follow err:", err.Error())
	}

	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinRelationActionResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetFollowList .
// @router /douyin/relation/follow/list/ [GET]
func GetFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Info("handler.relation_service.GetFollowList Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.relation_service.GetFollowList GetUserID:", userID)
	resp, err := service.GetFollowList(userID, uint64(req.UserID))
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinRelationFollowListResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func GetFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Info("handler.relation_service.GetFollowerList Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.relation_service.GetFollowList GetUserID:", userID)
	resp, err := service.GetFollowerList(userID, uint64(req.UserID))
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinRelationFollowerListResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetFriendList .
// @router /douyin/relation/friend/list/ [GET]
func GetFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Info("handler.relation_service.GetFollowerList Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.relation_service.GetFollowerList GetUserID:", userID)
	// 目前的判断是不能看别人的好友列表
	if userID != uint64(req.UserID) {
		hlog.Error("handler.relation_service.GetFollowerList err:", errno.UserRequestParameterError.ErrCode)
		c.JSON(consts.StatusOK, &api.DouyinRelationFriendListResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  &errno.UserRequestParameterError.ErrMsg,
		})
		return
	}
	resp, err := service.GetFriendList(userID)
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinRelationFriendListResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
