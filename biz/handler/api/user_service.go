// Code generated by hertz generator.

package api

import (
	"context"
	"douyin/biz/mw"
	"douyin/biz/service"
	"github.com/cloudwego/hertz/pkg/common/hlog"

	api "douyin/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := service.Register(&api.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})

	hlog.Info("resp")

	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 实际调用的是初始化 JWT 时传递的 func
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	// 实际调用的是初始化 JWT 时传递的 func
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Info("userinfo")

	resp, err := service.GetUserInfo(&api.DouyinUserRequest{
		UserID: req.UserID,
		Token:  req.Token,
	})
	hlog.Info(resp)
	if err != nil {
		c.JSON(consts.StatusOK, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
