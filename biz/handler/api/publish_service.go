// Code generated by hertz generator.

package api

import (
	"bytes"
	"context"
	"douyin/biz/service"
	"douyin/pkg/constant"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"io"
	"mime/multipart"

	"douyin/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Infof("%#v de", req)

	fileHeader, err := c.FormFile("data")
	if err != nil {
		c.JSON(consts.StatusOK, err)
		return
	}
	hlog.Infof("filename = %#v", fileHeader.Filename)

	file, err := fileHeader.Open()

	defer func(file multipart.File) {
		err := file.Close()
		if err != nil {
			return
		}
	}(file)

	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, file); err != nil {
		c.JSON(consts.StatusOK, err)
		return
	}

	userID := c.GetInt64(constant.IdentityKey)
	err = service.PublishAction(req.Title, buf.Bytes(), userID)
	if err != nil {
		c.JSON(consts.StatusOK, err)
		return
	}

	c.JSON(consts.StatusOK, &api.DouyinPublishActionResponse{
		StatusCode: 0,
		StatusMsg:  nil,
	})
}

// GetPublishVideos .
// @router /douyin/publish/list/ [GET]
func GetPublishVideos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	hlog.Infof("%#v", req)

	resp, err := service.GetPublishVideos(uint64(req.UserID))
	if err != nil {
		c.JSON(consts.StatusOK, err)
	}

	c.JSON(consts.StatusOK, resp)
}
