// Code generated by hertz generator.

package api

import (
	"context"
	"douyin/biz/model/api"
	"douyin/biz/service"
	"douyin/pkg/constant"
	"douyin/pkg/errno"
	"douyin/pkg/global"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Info("handler.comment_service.CommentAction Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.comment_service.CommentAction GetUserID:", userID)
	var resp *api.DouyinCommentActionResponse
	// 这里注意走 ActionType 对应的逻辑的时候要注意判断相关字段是否为空
	if req.ActionType == constant.PostComment && req.CommentText != nil {
		resp, err = service.PostComment(userID, uint64(req.VideoID), *req.CommentText)
	} else if req.ActionType == constant.DeleteComment && req.CommentID != nil {
		resp, err = service.DeleteComment(userID, uint64(req.VideoID), uint64(*req.CommentID))
	} else {
		err = errno.UserRequestParameterError
		hlog.Error("handler.comment_service.CommentAction err:", err.Error())
	}
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinCommentActionResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCommentList .
// @router /douyin/comment/list/ [GET]
func GetCommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &api.DouyinResponse{
			StatusCode: errno.UserRequestParameterError.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	hlog.Info("handler.comment_service.GetCommentList Request:", req)
	userID := c.GetUint64(global.Config.JWTConfig.IdentityKey)
	hlog.Info("handler.comment_service.GetCommentList GetUserID:", userID)
	resp, err := service.GetCommentList(userID, uint64(req.VideoID))
	if err != nil {
		errNo := errno.ConvertErr(err)
		c.JSON(consts.StatusOK, &api.DouyinCommentListResponse{
			StatusCode: errNo.ErrCode,
			StatusMsg:  &errNo.ErrMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}
